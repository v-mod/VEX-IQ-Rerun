{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nLeft = Motor(Ports.PORT1, False)\nRight = Motor(Ports.PORT6, True)\nShooter = Motor(Ports.PORT8, False)\nBlueArm = Motor(Ports.PORT7, False)\nPurple = Motor(Ports.PORT12, True)\ncontroller = Controller()\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       Vivaan M + Aviral G\n# \tCreated:      07-12-2022\n# \tDescription:  Auton Learner for team 21549E\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\nDriveLM = 0\nDriveRM = 0\nPurpleM = 0\nShootM = 0\nBlueM = 0\n\n# Setting up the bot\n# Things such as max velocity and torque are setup here\n# For the drivebase, we start the motors at 0% velocity and modify them based on the joysticks postion\ndef setUp():\n    Left.set_max_torque(100,PERCENT)\n    Left.set_velocity(0,PERCENT)\n    Left.spin(FORWARD)\n    Right.set_max_torque(100,PERCENT)\n    Right.set_velocity(0,PERCENT)\n    Right.spin(FORWARD)\n    Shooter.set_max_torque(100,PERCENT)\n    BlueArm.set_max_torque(100,PERCENT)\n\n# This is the Motor Data Reader and writer\n# It is responsible for running a driver control run, while also storing all the rpm's of the motors every 20ms\ndef getAutonData():\n    global DriveLM\n    global DriveRM\n    global PurpleM\n    global ShootM\n    global BlueM\n    # Data format (Left,Right,Shooter,BlueArm,Purple)\n    # Opening the file\n    f = open('auton.txt','w')\n    # Ready to begin teaching!\n    print('Teaching Started')\n    # Just setting a temp variable r to keep track of the amount of times this while loop loops\n    r = 0\n    # Driver control has begun.\n    while r != 1500:\n        # Drivebase\n        # Left\n        if controller.axisA.position() > 40:\n            Left.set_velocity(100,PERCENT)\n            DriveLM=str(Left.velocity(RPM))\n        else:\n            Left.set_velocity(controller.axisA.position(),PERCENT)\n            DriveLM=str(Left.velocity(RPM))\n        # Right\n        if controller.axisD.position() > 40:\n            Right.set_velocity(100,PERCENT)\n            DriveRM=Right.velocity(RPM)\n        else:\n            Right.set_velocity(controller.axisD.position(),PERCENT)\n            DriveRM=Right.velocity(RPM)\n        # Purple Dispnser\n        if controller.buttonEUp.pressing():\n            Purple.spin(FORWARD)\n            PurpleM=Purple.velocity(RPM)\n        elif controller.buttonEDown.pressing():\n            Purple.stop()\n            PurpleM=0\n        # Blue Arm \n        if controller.buttonLUp.pressing():\n            BlueArm.spin(FORWARD)\n            BlueM=100\n        elif controller.buttonLDown.pressing():\n            BlueArm.spin(REVERSE)\n            BlueM=-100\n        else: \n            BlueArm.stop()\n            BlueM=0\n        # Shooter\n        if controller.buttonRUp.pressing():\n            Shooter.spin(FORWARD)\n            ShootM=100\n        else:\n            Shooter.stop()\n            ShootM=0\n        # Making the data string to store\n        data=str(DriveLM)+','+str(DriveRM)+','+str(ShootM)+','+str(BlueM)+','+str(PurpleM)+'\\n'\n        # Just printing it for verbose logs as well as the time it has run\n        print('Read Data: '+data, end=\"\\n\")\n        # Writing the data string\n        f.write(data)\n        # Modifying the temp variable r: adding 1 to show how many times this has looped\n        r=r+1\n        # Pausing for 20ms\n        wait(20,MSEC)\n    # The loop has ended as 1500 mappings have been stored\n    print('1500 mappings stored')\n    # Closing the file\n    f.close()\n    # Just printing that it is safe to exit\n    print('It is now safe to exit.')\n\n\n# MAIN\nprint('Program Started')\n# Setting up\nsetUp()\n# Running the getAutonData function on Controller Button E Up pressed\nautonCapture=True\nwhile autonCapture:\n    if controller.buttonFUp.pressing():\n        getAutonData()\n        autonCapture=False","textLanguage":"python","rconfig":[{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"Shooter","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"BlueArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"Purple","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.2","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}