{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller1 = controller();\nmotor Left = motor(PORT1, false);\nmotor Right = motor(PORT6, false);\nmotor PurpleDisp = motor(PORT12, true);\nmotor Shooter = motor(PORT8, false);\nmotor BlueArm = motor(PORT7, false);\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       Vivaan Modi                                                  \n//    Created:      06-12-2022                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Other Libraries \n#include <cstdio>\n#include <iostream>\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nstd::ofstream ofs;\n\n// Formatting functions\nstd::string toString(int val)\n{\n    std::stringstream stream;\n    stream << val;\n    return stream.str();\n}\n\nstd::string formatToString(int num){\n  if(num == 100){\n    return \"100,\";\n  } else if((num >= 10) && (num < 100)){\n    return (toString(num) + \",\");\n  } else {\n    return (toString(num) + \",\");\n  }\n}\n\n// Learning Mode. This is what runs in order to train the bot by storing 1500 mappings, one evry 20ms\n// That is 30 seconds worth of driver time\n// It stores it in a array of 1500 by 5\n\nvoid trainingMode( void ) {\n  Left.stop(vex::brakeType::brake);\n  Right.stop(vex::brakeType::brake);\n  Shooter.stop(vex::brakeType::brake);\n  BlueArm.stop(vex::brakeType::brake);\n  PurpleDisp.stop(vex::brakeType::brake);\n  \n  // Starting to record driver movement\n  while (true) {\n    // Recording is initialized by pressing the E up button\n    if(Controller1.ButtonEUp.pressing()){\n      // Open a text file on the SD card called auton.txt to store all of the data\n      ofs.open(\"auton.txt\", std::ofstream::out);\n      int i = 0;\n      while(true && i < 1500){\n        if(Brain.SDcard.isInserted()){ \n          if(abs(Controller1.AxisA.value()) || abs(Controller1.AxisC.value())){ // Drivebase\n            //Left.spin(vex::directionType::fwd, (Controller1.AxisA.position(percentUnits::pct)));\n            //Right.spin(vex::directionType::fwd, (Controller1.AxisC.position(percentUnits::pct)));\n        } else{\n            Left.stop();\n            Right.stop();\n        }\n\n        if(Controller1.ButtonEUp.pressing()){ // PurpleDisp\n          PurpleDisp.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);\n\n        } else if (Controller1.ButtonEDown.pressing()){\n          PurpleDisp.stop();\n        }\n\n        if(Controller1.ButtonLUp.pressing()){ // BlueArm\n          BlueArm.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);\n        } else if (Controller1.ButtonLDown.pressing()){\n          BlueArm.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);\n        } else {\n          BlueArm.stop();\n        }\n\n        if(Controller1.ButtonRUp.pressing()){ // SHooter\n          Shooter.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);\n        } else if (Controller1.ButtonRDown.pressing()){\n          Shooter.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);\n        } else {\n          Shooter.stop();\n        }\n          ofs << \"{\";\n          if(abs(Controller1.AxisA.value()) || abs(Controller1.AxisC.value())){ // Drivebase\n            ofs << formatToString(Controller1.AxisA.position(percentUnits::pct));\n            ofs << formatToString(Controller1.AxisC.position(percentUnits::pct));\n        } else {\n            ofs << formatToString(0); \n            ofs << formatToString(0);\n        }\n\n        if(Controller1.ButtonRUp.pressing()){ // Shooter\n          ofs << formatToString(100);\n        } else {\n          ofs << formatToString(0);\n        }\n\n        if(Controller1.ButtonLUp.pressing()){ // BlueArm\n          ofs << formatToString(100);\n        } else if (Controller1.ButtonLDown.pressing()){\n          ofs << formatToString(-100);\n        } else {\n          ofs << formatToString(0);\n        }\n\n        if(Controller1.ButtonEUp.pressing()){ // PurpleDisp\n          ofs << formatToString(100);\n        } else {\n          ofs << formatToString(0);\n        }\n\n          ofs << \"},\";\n      } else {\n        Brain.Screen.print(\"N\"); \n      }\n\n      vex::task::sleep(20);\n      i++;\n      }\n    ofs.close();\n    }\n  }\n}\n\nint main() {\n  // Begin project code\n  trainingMode();\n\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"PurpleDisp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"Shooter","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"BlueArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.2","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}